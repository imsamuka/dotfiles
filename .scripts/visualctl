#!/usr/bin/env sh


CUR_PATH=`dirname "$(readlink -f "$0")"`
CUR_FILE="$CUR_PATH/visualctl_profiles/current"
CUR_PROFILE=`cat $CUR_FILE || echo dark`
NOTIFYING=''


print_log(){
  echo "[visualctl] $*"
}
notify(){
  NOTIFYING="${NOTIFYING}${1}\n"
}
change_config(){
  "$HOME/.scripts/particular/change_config.sh" "$@"
}

set_visual(){

  NEW_PROFILE=${1:?"Must provide visual profile name"}

  if [ $NEW_PROFILE = 'current' ]; then
    print_log "Forbidden visual profile."
    return 1
  fi

  if [[ "$NEW_PROFILE" == "$CUR_PROFILE" ]];
    then print_log "Restarting visuals from '$CUR_PROFILE'";
    else print_log "Changing visuals from '$CUR_PROFILE' to '$NEW_PROFILE'";
  fi

  # Store the new visual profile
  print_log "Saving the chosen visual profile..."
  echo "$NEW_PROFILE" >| "$CUR_FILE"

  notify "Changed Visual Profile to '$NEW_PROFILE'"
  CUR_PROFILE="$NEW_PROFILE"

  # There's something to change?
  if [[ -f "$CUR_PATH/visualctl_profiles/$CUR_PROFILE" ]];
    then source "$CUR_PATH/visualctl_profiles/$CUR_PROFILE"
    else
      print_log "Visual profile '$CUR_PROFILE' not found."
      notify "Visual profile '$CUR_PROFILE' not found."
      return 0
  fi

  # Initialize Local Variables
  local GTK2_CONFIG="$HOME/.gtkrc-2.0"
  local GTK3_CONFIG="$HOME/.config/gtk-3.0/settings.ini"
  local XSETTINGSD_CONFIG="$HOME/.xsettingsd"
  local XRESOURCES_CONFIG="$HOME/.Xresources"


  # Set Theme
  if  [[ -n $NEW_THEME ]] && \
      [[ -d "/usr/share/themes/$NEW_THEME" || \
         -d "$HOME/.local/share/themes/$NEW_THEME" || \
         -d "$HOME/.themes/$NEW_THEME" ]];
    then print_log "├─ Applying Theme '$NEW_THEME'.";

      sed -i '2s_Net/ThemeName.*_Net/ThemeName "'"$NEW_THEME"'"_' $XSETTINGSD_CONFIG
      change_config "$GTK2_CONFIG" "gtk-theme-name" "\"$NEW_THEME\""
      change_config "$GTK3_CONFIG" "gtk-theme-name" "$NEW_THEME"

    else
      print_log "├─ Theme '$NEW_THEME' not found. No Changes."
      notify "Theme '$NEW_THEME' not found."
  fi


  # Set Icons
  if  [[ -n $NEW_ICONS ]] && \
      [[ -d "/usr/share/icons/$NEW_ICONS" || \
         -d "$HOME/.local/share/icons/$NEW_ICONS" || \
         -d "$HOME/.icons/$NEW_ICONS" ]];
    then print_log "├─ Applying Icons '$NEW_ICONS'.";

      sed -i '1s_Net/IconThemeName.*_Net/IconThemeName "'"$NEW_ICONS"'"_' $XSETTINGSD_CONFIG
      change_config "$GTK2_CONFIG" "gtk-icon-theme-name" "\"$NEW_ICONS\""
      change_config "$GTK3_CONFIG" "gtk-icon-theme-name" "$NEW_ICONS"

    else
      print_log "├─ Icons '$NEW_ICONS' not found. No Changes."
      notify "Icons '$NEW_ICONS' not found."
  fi


  # .Xresources Terminal Colors
  # To avoid problems, only lines like '*color3: ...' are changed
  if [[ -f "$XRESOURCES_CONFIG" ]]
    then
      print_log "├─ Setting .Xresources Colors."
      local changed=1

      [[ -n "$foreground" ]] \
        && change_config -c "$XRESOURCES_CONFIG" "\*foreground" "$foreground" \
        && changed=0

      [[ -n "$background" ]] \
        && change_config -c "$XRESOURCES_CONFIG" "\*background" "$background" \
        && changed=0

      for i in color{0..15}; do
        [[ -n "${!i}" ]] \
          && change_config -c "$XRESOURCES_CONFIG" "\*$i" "${!i}" \
          && changed=0
      done

      # If any 'change_config' results in success, 'changed' will be 0
      if [ $changed == 0 ];
        then print_log "├─ .Xresources Colors changed."
        else
          print_log "├─ .Xresources Colors didn't change."
          notify "Didn't change .Xresources colors."
      fi
  fi

  return 0
}


restart() {


  # Set Wallpaper
  set-wallpaper "$CUR_PROFILE"
  case $? in
    1) notify "Failed to set wallpaper";;
    2) notify "No wallpapers found";;
  esac

  # Restart Panel
  tint2ctl restart "$HOME/.config/tint2/$CUR_PROFILE.tint2rc"


  # Restart Dunst
  print_log "Restarting Dunst..."
  killall dunst &> /dev/null

  if [[ -f "$HOME/.config/dunst/$CUR_PROFILE.dunstrc" ]]
    then dunst -conf "$HOME/.config/dunst/$CUR_PROFILE.dunstrc" &> /dev/null &
    else dunst &> /dev/null &
  fi

  # Refresh a bunch of things
  refresh no_notify


  # Exit
  print_log "Visuals set successfully."
  notify-send -u low -i $(icon_path preferences-color) \
   "Restarted Visuals" "$NOTIFYING" &> /dev/null

  return 0
}


# Search for a Xorg Display
test -z $DISPLAY && print_log "Couldn't find a Display." && exit 1


# Select the use case
case $1 in

    # Toggle between 2 configured options
    toggle)
      if [[ $CUR_PROFILE != *"dark"* ]]; then set_visual dark
      elif [[ $CUR_PROFILE != *"light"* ]]; then set_visual light
      fi
    ;;

    # Choose any visual
    set) set_visual "$2";;
esac

restart

